// This file automatically generated by MOKO KSwift (https://github.com/icerockdev/moko-kswift)
//
import shared

/**
 * selector: ClassContext/PlayTogetherKMP:shared/com/playtogether/kmp/presentation/util/UIState */
public enum UIStateKs<T : AnyObject> {

  case empty
  case failure(UIStateFailure)
  case loading
  case success(UIStateSuccess<T>)

  public var sealed: UIState<T> {
    switch self {
    case .empty:
      return shared.UIStateEmpty() as! shared.UIState<T>
    case .failure(let obj):
      return obj as! shared.UIState<T>
    case .loading:
      return shared.UIStateLoading() as! shared.UIState<T>
    case .success(let obj):
      return obj as shared.UIState<T>
    }
  }

  public init(_ obj: UIState<T>) {
    if obj is shared.UIStateEmpty {
      self = .empty
    } else if let obj = obj as? shared.UIStateFailure {
      self = .failure(obj)
    } else if obj is shared.UIStateLoading {
      self = .loading
    } else if let obj = obj as? shared.UIStateSuccess<T> {
      self = .success(obj)
    } else {
      fatalError("UIStateKs not synchronized with UIState class")
    }
  }

}

/**
 * selector: ClassContext/PlayTogetherKMP:shared/com/playtogether/kmp/data/util/Resource */
public enum ResourceKs<T : AnyObject> {

  case failure(ResourceFailure)
  case success(ResourceSuccess<T>)

  public var sealed: Resource<T> {
    switch self {
    case .failure(let obj):
      return obj as! shared.Resource<T>
    case .success(let obj):
      return obj as shared.Resource<T>
    }
  }

  public init(_ obj: Resource<T>) {
    if let obj = obj as? shared.ResourceFailure {
      self = .failure(obj)
    } else if let obj = obj as? shared.ResourceSuccess<T> {
      self = .success(obj)
    } else {
      fatalError("ResourceKs not synchronized with Resource class")
    }
  }

}
